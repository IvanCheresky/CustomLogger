
The project is divided in two part:

1. The logger class library
2. The console application with an example usage

The class library can be used by calling the AddLogger extension method on IServiceCollection. This requires a LoggerConfiguration action specifying
which log levels will be logged and where they will be logged. After this setup, the ILoggingService can be injected into classes. The method Log will
print messages according to the configuration. There is an additional method - ForceLog - for logging a message which overrides the configuration.

The logger configuration must be set in appsettings.

To print to the db, the ConnectionString in appsetting must point to a db with a Logs table. The following script was used for the table (alternatively, 
migrations could be run):

CREATE TABLE [dbo].[Logs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LogType] [varchar](50) NOT NULL,
	[LogLevel] [varchar](50) NOT NULL,
	[CreationDate] [datetime] NOT NULL,
	[Message] [varchar](max) NOT NULL
)